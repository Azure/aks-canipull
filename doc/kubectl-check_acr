#!/bin/sh

context=""
kubeconfig=""
generator=""
acr=""
namespace=""
while [ $# -gt 0 ]; do
  key="$1"

  case $key in
  --context)
    context="--context $2"
    shift
    shift
    ;;
  --kubeconfig)
    kubeconfig="--kubeconfig $2"
    shift
    shift
    ;;
  -n | --namespace)
    namespace="--namespace $2"
    shift
    shift
    ;;
  *)
    acr="$1"
    shift
    ;;
  esac
done

if [ -z "$acr" ]; then
  echo "Please specify ACR name"
  exit 1
fi

image="mcr.microsoft.com/aks/canipull:0.0.4-alpha"
pod="canipull-$(env LC_ALL=C tr -dc a-z0-9 < /dev/urandom | head -c 6)"

overrides="$(
  cat <<EOT
{
  "spec": {
    "restartPolicy": "Never",
    "hostNetwork": true,
    "containers": [
      {
        "securityContext": {
          "runAsUser": 0
        },
        "image": "$image",
        "name": "canipull",
        "stdin": true,
        "stdinOnce": true,
        "tty": true,
        "args": [ "-v6", "$acr" ],
        "volumeMounts": [
          {
            "name": "azurejson",
            "mountPath": "/etc/kubernetes"
          },
          {
            "name": "sslcerts",
            "mountPath": "/etc/ssl/certs"
          }
        ]
      }
    ],
    "tolerations": [
      {
        "key": "CriticalAddonsOnly",
        "operator": "Exists"
      },
      {
        "effect": "NoExecute",
        "operator": "Exists"
      }
    ],
    "volumes": [
      {
        "name": "azurejson",
        "hostPath": {
          "path": "/etc/kubernetes"
        }
      },
      {
        "name": "sslcerts",
        "hostPath": {
          "path": "/etc/ssl/certs"
        }
      }
    ]
  }
}
EOT
)"

# Support Kubectl <1.18
m=$(kubectl version --client -o yaml | awk -F'[ :"]+' '$2 == "minor" {print $3+0}' )
if [ "$m" -lt 18 ]; then
  generator="--generator=run-pod/v1"
fi

echo "spawning \"$pod\" to perform ACR access check"
kubectl run --rm --image "$image" --overrides="$overrides" -it "$pod" $generator $context $kubeconfig $namespace
